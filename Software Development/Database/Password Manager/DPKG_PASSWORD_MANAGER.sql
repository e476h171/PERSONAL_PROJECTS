
CREATE OR REPLACE PACKAGE DPKG_PASSWORD_MANAGER AS    

	--RETURNS AN RANDOM MULTI CASE ALPHA NUMERIC STRING OF 9 TO GENERATE A STRONG PASSWORD
	FUNCTION RANDOM_STR RETURN VARCHAR2; 
 	
 	--GENERATES NEW PASSWORD FOR SPECIFIED PLATFORM WITH A CONSTRAINT PREVENTING THE PASSWORD TO BE THE SAME AS THE 3 PAST 3 PASSWORDS IN THE PWD_MGR_HISTORY_LOG TABLE
 	PROCEDURE PASSWORD_GENERATOR( P_ID IN PWD_MGR_MASTER.ID%TYPE);
 	
 	--RETURNS INFORMATION ON PASSWORDS GIVEN THE SPECIFIED PLATFORMS
 	PROCEDURE PASSWORD_MANAGER_GETTER(
	P_REF_CURSOR 			OUT 	SYS_REFCURSOR,
	P_ERR_CODE				OUT 	VARCHAR2,
	P_ERR_MSG	 	  		OUT 	VARCHAR2,
	P_LIST	  				IN		VARCHAR2);
	
	--UPDATES PASSWORD HISTORY LOG WHEN PASSWORD IS UPDATED
	PROCEDURE UPDATE_HISTORY_LOG ( P_ID NUMBER);
 	
END DPKG_PASSWORD_MANAGER; 


---------------------------------------------------------------------------------------------------------------------  

---------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------


CREATE OR REPLACE PACKAGE BODY DPKG_PASSWORD_MANAGER AS 
 
--RETURNS AN RANDOM MULTI CASE ALPHA NUMERIC STRING OF 9 TO GENERATE A STRONG PASSWORD
	FUNCTION RANDOM_STR RETURN VARCHAR2 IS
	    MY_STR VARCHAR2(4000);
	BEGIN
	    FOR I IN 1..9 LOOP
	        MY_STR := MY_STR || DBMS_RANDOM.STRING(
	            CASE WHEN DBMS_RANDOM.VALUE(0, 1) < 0.5 THEN 'L' ELSE 'X' END, 1);
	    END LOOP;
	    RETURN MY_STR;
	END;  
	
--GENERATES NEW PASSWORD FOR SPECIFIED PLATFORM WITH A CONSTRAINT PREVENTING THE PASSWORD TO BE THE SAME AS THE 3 PAST 3 PASSWORDS IN THE PWD_MGR_HISTORY_LOG TABLE 
	PROCEDURE PASSWORD_GENERATOR( P_ID IN PWD_MGR_MASTER.ID%TYPE)
	IS
	BEGIN 
	
	DPKG_PASSWORD_MANAGER.UPDATE_HISTORY_LOG(P_ID); 
	
		UPDATE PWD_MGR_MASTER
		SET CURRENT_PASSWORD = DPKG_PASSWORD_MANAGER.RANDOM_STR()
		WHERE ID = P_ID; 
	
	
	END PASSWORD_GENERATOR;

--RETURNS INFORMATION ON PASSWORDS GIVEN THE SPECIFIED PLATFORMS       

	PROCEDURE PASSWORD_MANAGER_GETTER(
		P_REF_CURSOR 			OUT 	SYS_REFCURSOR,
		P_ERR_CODE				OUT 	VARCHAR2,
		P_ERR_MSG	 	  		OUT 	VARCHAR2,
		P_LIST	  				IN		VARCHAR2	
	)
	IS  	
	BEGIN
		OPEN P_REF_CURSOR FOR 
		SELECT * FROM PWD_MGR_MASTER
		WHERE PLATFORM IN (
			SELECT REGEXP_SUBSTR(P_LIST ,'[^,]+', 1, LEVEL) FROM DUAL
	 			CONNECT BY REGEXP_SUBSTR(P_LIST , '[^,]+', 1, LEVEL) IS NOT NULL );   
	 		
	EXCEPTION
		WHEN OTHERS THEN
			P_ERR_CODE 	:= NULL;
			P_ERR_MSG	:= 'SQL ERRROR'||SQLERRM; 
			
	END PASSWORD_MANAGER_GETTER;   
	
--UPDATES PASSWORD HISTORY LOG WHEN PASSWORD IS UPDATED
	PROCEDURE UPDATE_HISTORY_LOG ( P_ID NUMBER)
	IS
	BEGIN 	
			
		UPDATE PWD_MGR_HISTORY_LOG 
	   SET PLATFORM = (SELECT PLATFORM FROM PWD_MGR_HISTORY_LOG WHERE ID=P_ID) , 
	       PREVIOUS_PASSWORD = (SELECT CURRENT_PASSWORD FROM PWD_MGR_MASTER WHERE ID=P_ID), 
	       OLDER_PASSWORD = (SELECT PREVIOUS_PASSWORD FROM PWD_MGR_HISTORY_LOG WHERE ID=P_ID), 
	       OLDEST_PASSWORD = (SELECT OLDER_PASSWORD FROM PWD_MGR_HISTORY_LOG WHERE ID=P_ID)
	   WHERE ID=P_ID; 
	
	END UPDATE_HISTORY_LOG;  

	
END DPKG_PASSWORD_MANAGER;
